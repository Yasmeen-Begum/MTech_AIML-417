
// Case 1 : All Elements are Sorted
 
#include<stdio.h>

#include<time.h>

void bubbleSort(int array[], int size)
{
for(int step = 0; step < size - 1; ++step) {

for(int i = 0; i < size - step - 1; ++i) {

if(array[i] > array[i + 1]) {

int temp = array[i];

array[i] = array[i + 1];

array[i + 1] = temp;

}
}
}
}

void printArray(int array[], int size) {

for (int i = 0; i < size; ++i) {

printf("%d ", array[i]);

}}

int main() 

{

clock_t start,end;

double execution_time;

start=clock();

int arr[1200];

FILE *fptr;

int i=0;

fptr=fopen("inputFile1.txt","r");

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;

}

fclose(fptr);

int size = sizeof(arr)/sizeof(arr[0]);

bubbleSort(arr, size);

printf("Sorted Array :\t");

printArray(arr, size);

end=clock();

execution_time=((double)(end-start))/CLOCKS_PER_SEC;

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}

--------------------------------------------------------------
Case 2: First 50 % elements are Sorted and remaining Unsorted
--------------------------------------------------------------

#include<stdio.h>

#include<time.h>

void bubbleSort(int array[], int size) {

for(int step = 0; step < size - 1; ++step) {

for(int i = 0; i < size - step - 1; ++i) {

if(array[i] > array[i + 1]) {

int temp = array[i];

array[i] = array[i + 1];

array[i + 1] = temp;

}}}}

void printArray(int array[], int size) {

for(int i = 0; i < size; ++i) {

printf("%d ", array[i]);

}}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1100];

FILE *fptr;

int i=0;

fptr=fopen("inputFile2.txt","r");

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;

}

fclose(fptr);

int size = sizeof(arr)/sizeof(arr[0]);

bubbleSort(arr, size);

printf("Sorted Array :\n");

printArray(arr, size);

end=clock();

execution_time=((double)(end-start))/CLOCKS_PER_SEC;

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}

----------------------------------------------------
Case 3: All elements are Sorted but in reverse Order
----------------------------------------------------

#include <stdio.h>

#include<time.h>

void bubbleSort(int array[], int size) {

for(int step = 0; step < size - 1; ++step) {

for(int i = 0; i < size - step - 1; ++i) {

if(array[i] > array[i + 1]) {

int temp = array[i];

array[i] = array[i + 1];

array[i + 1] = temp;

}}}}

void reverseArray(int arr[], int start, int end){

int temp;

while (start < end){

temp = arr[start];

arr[start] = arr[end];

arr[end] = temp;

start++;

end--;

} }

void printArray(int array[], int size) {

for(int i = 0; i <size; i++) {

printf("%d ", array[i]);

}}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1200];

FILE *fptr;

int i=0;

fptr=fopen("inputFile1.txt","r");

while((fscanf(fptr,"%d",&arr[i]))!=EOF)

{

i++;

}
fclose(fptr);

int size = sizeof(arr)/sizeof(arr[0]);

bubbleSort(arr, size);

reverseArray(arr, 0, size-1);

printf("Reversed array is \n");

printArray(arr, size);

end=clock();

execution_time=((double)(end-start))/CLOCKS_PER_SEC;

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}




