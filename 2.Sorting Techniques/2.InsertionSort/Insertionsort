MTech_AIML-417

Name:Yasmeen Begum

Roll.no:1005-22-742417


Insertion Sort

---------------------------------
Case 1 : All Elements are Sorted
--------------------------------

#include <stdio.h>

#include<time.h>

void printArray(int array[], int size) {

for(int i = 0; i < size; i++) {

printf("%d ", array[i]);

}

printf("\n");

}

void insertionSort(int array[], int size) {

for(int step = 1; step < size; step++) {

int key = array[step];

int j = step - 1;

while (key < array[j] && j >= 0) {

array[j + 1] = array[j];

--j;

}

array[j + 1] = key;

}
}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1200]; //modify by me

FILE *fptr;

int i=0;

fptr=fopen("inputFile.txt","r"); //modify by me

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;

}

fclose(fptr);

int size = sizeof(arr) / sizeof(arr[0]);

insertionSort(arr, size);

printf("Sorted array :\t");

printArray(arr, size);

end=clock();

execution_time=((double)(end-start))/CLOCKS_PER_SEC;

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}

--------------------------------------------------------------
Case 2: First 50 % elements are Sorted and remaining Unsorted
-------------------------------------------------------------

#include <stdio.h>

#include<time.h>

void printArray(int array[], int size) {

for (int i = 0; i < size; i++) {

printf("%d ", array[i]);

}

printf("\n");

}

void insertionSort(int array[], int size) {

for (int step = 1; step < size; step++) {

int key = array[step];

int j = step - 1;

while (key < array[j] && j >= 0) {

array[j + 1] = array[j];

--j;

}

array[j + 1] = key;

}

}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1100]; //modify by me

FILE *fptr;

int i=0;

fptr=fopen("inputFile2.txt","r"); //modify by me

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;

}

fclose(fptr);

int size = sizeof(arr) / sizeof(arr[0]);

insertionSort(arr, size);

printf("Sorted array :\t");

printArray(arr, size);

end=clock();

execution_time=((double(end-start))/CLOCKS_PER_SEC);

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}

----------------------------------------------------
Case 3: All elements are Sorted but in reverse Order
----------------------------------------------------

#include <stdio.h>

#include<time.h>

void printArray(int array[], int size) {

for (int i = 0; i < size; i++) {

printf("%d ", array[i]);

}

printf("\n");

}

void insertionSort(int array[], int size) {

for(int step = 1; step < size; step++) {

int key = array[step];

int j = step - 1;

while (key < array[j] && j >= 0) {

array[j + 1] = array[j];

--j;

}

array[j + 1] = key;

}
}

void reverseArray(int arr[], int start, int end){

int temp;

while (start < end){

temp = arr[start];

arr[start] = arr[end];

arr[end] = temp;

start++;

end--;

}
}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1200]; //modify by me

FILE *fptr;

int i=0;

fptr=fopen("inputFile.txt","r"); //modify by me

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;

}

fclose(fptr);

int size = sizeof(arr) / sizeof(arr[0]);

insertionSort(arr, size);

reverseArray(arr, 0, size-1);

printf("Reversed array is \n");

printArray(arr, size);

end=clock();

execution_time=((double(end-start))/CLOCKS_PER_SEC);

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}
