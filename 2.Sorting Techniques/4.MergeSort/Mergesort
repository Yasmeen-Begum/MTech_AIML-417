MTech_AIML-417

Name:Yasmeen Begum

Roll.no:1005-22-742417


4.Merge Sort

//--------------------------------
//Case 1 : All Elements are Sorted
//--------------------------------

#include <stdio.h>

#include<time.h>

void merge(int arr[], int p, int q, int r) {

int n1 = q - p + 1;

int n2 = r - q;

int L[n1], M[n2];

for (int i = 0; i < n1; i++)

L[i] = arr[p + i];

for (int j = 0; j < n2; j++)

M[j] = arr[q + 1 + j];

int i, j, k;

i = 0;

j = 0;

k = p;

while (i < n1 && j < n2) {

if(L[i] <= M[j]) {

arr[k] = L[i];

i++;

} else {

arr[k] = M[j];

j++; 

}

k++; 

}

while (i < n1) {

arr[k] = L[i];

i++;

k++;}

while (j < n2) {

arr[k] = M[j];

j++;

k++;

}}

void mergeSort(int arr[], int l, int r) {

if (l < r) {
int m = l + (r - l) / 2;

mergeSort(arr, l, m);

mergeSort(arr, m + 1, r);

merge(arr, l, m, r);

}}

void printArray(int arr[], int size) {

for (int i = 0; i < size; i++)

printf("%d ", arr[i]);

printf("\n");

}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1200]; //modify by me

FILE *fptr;

int i=0;

fptr=fopen("inputFile1.txt","r"); //modify by me

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;

}

fclose(fptr);

int size = sizeof(arr) / sizeof(arr[0]);

mergeSort(arr, 0, size - 1);

printf("array is: \n");

printArray(arr, size);

execution_time=((double(end-start))/CLOCKS_PER_SEC);

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}
-------------------------------------------------------------
Case 2: First 50 % elements are Sorted and remaining Unsorted
-------------------------------------------------------------

#include<stdio.h>

#include<time.h>

void merge(int arr[], int p, int q, int r) {

int n1 = q - p + 1;

int n2 = r - q;

int L[n1], M[n2];

for (int i = 0; i < n1; i++)

L[i] = arr[p + i];

for (int j = 0; j < n2; j++)

M[j] = arr[q + 1 + j];

int i, j, k;

i = 0;

j = 0;
k = p;

while (i < n1 && j < n2) {

if(L[i] <= M[j]) {

arr[k] = L[i];

i++;

} else {
arr[k] = M[j];

j++;}

k++; }

while (i < n1) {

arr[k] = L[i];

i++;

k++;
}

while (j < n2) {

arr[k] = M[j];
j++;

k++;

}}

void mergeSort(int arr[], int l, int r) {

if (l < r) {
int m = l + (r - l) / 2;

mergeSort(arr, l, m);

mergeSort(arr, m + 1, r);

merge(arr, l, m, r);

}}

void printArray(int arr[], int size) {

for (int i = 0; i < size; i++)

printf("%d ", arr[i]);

printf("\n");

}

int main() {

clock_t start,end;

double execution_time;


start=clock();

int arr[1100]; //modify by me

FILE *fptr;

int i=0;

fptr=fopen("inputFile2.txt","r"); //modify by me

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;}

fclose(fptr);


int size = sizeof(arr) / sizeof(arr[0]);

mergeSort(arr, 0, size - 1);

printf("array is: \n");

printArray(arr, size);

execution_time=((double(end-start))/CLOCKS_PER_SEC);

printf("\nTime taken to execute in second: %f",execution_time);
return 0;


}


----------------------------------------------------
Case 3: All elements are Sorted but in reverse Order
----------------------------------------------------

#include <stdio.h>

#include<time.h>

void merge(int arr[], int p, int q, int r) {

int n1 = q - p + 1;

int n2 = r - q;

int L[n1], M[n2];

for (int i = 0; i < n1; i++)

L[i] = arr[p + i];

for (int j = 0; j < n2; j++)

M[j] = arr[q + 1 + j];

int i, j, k;

i = 0;


j = 0;

k = p;

while (i < n1 && j < n2) {

if(L[i] <= M[j]) {


arr[k] = L[i];

i++;

} else {

arr[k] = M[j];

j++;}


k++;}

while (i < n1) {

arr[k] = L[i];


34

i++;

k++;}


while (j < n2) {

arr[k] = M[j];

j++;


k++; }}

void mergeSort(int arr[], int l, int r) {

if (l < r) {

int m = l + (r - l) / 2;
mergeSort(arr, l, m);
mergeSort(arr, m + 1, r);

merge(arr, l, m, r);

}}

void reverseArray(int arr[], int start, int end){

int temp;

while (start < end){

temp = arr[start];

arr[start] = arr[end];

arr[end] = temp;

start++;

end--;} }

void printArray(int arr[], int size) {

for (int i = 0; i < size; i++)

printf("%d ", arr[i]);

printf("\n");}

int main() {

clock_t start,end;

double execution_time;

start=clock();

int arr[1200];//modify by me

FILE *fptr;

int i=0;

fptr=fopen("inputFile1.txt","r"); //modify by me

while((fscanf(fptr,"%d",&arr[i]))!=EOF){

i++;}

fclose(fptr);

int size = sizeof(arr) / sizeof(arr[0]);

mergeSort(arr, 0, size - 1);

reverseArray(arr, 0, size-1);

printf("Reversed array is \n");

printArray(arr, size);

execution_time=((double(end-start))/CLOCKS_PER_SEC);

printf("\nTime taken to execute in second: %f",execution_time);

return 0;

}

